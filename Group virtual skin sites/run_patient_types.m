% run_patient_types.m
%
% Runner script to generate all patient type visualisations
%
% This script runs g_PatientTypes_1.m, g_PatientTypes_2.m, and g_PatientTypes_3.m
% to create figures showing virtual skin sites grouped by number of steady states.
%
% Prerequisites:
%   - Must have ../Analyse steady states/data/AllVirtualPatientTypes_latest.csv
%     (generated by run_SteadyStates.m)
%
% Outputs:
%   - data/One_StableState.csv, Two_StableStates.csv, Three_StableStates.csv
%   - figures/PatientTypes_1_SteadyState.png
%   - figures/PatientTypes_2_SteadyStates.png
%   - figures/PatientTypes_3_SteadyStates.png
%
% Usage:
%   matlab -batch "run('run_patient_types.m')"
%
% Author: Jamie Lee
% Date: 13 October 2025

clc;
fprintf('╔═══════════════════════════════════════════════════════╗\n');
fprintf('║       Patient Type Visualisation Generation           ║\n');
fprintf('║         (Steady State Analysis Figures)               ║\n');
fprintf('╚═══════════════════════════════════════════════════════╝\n\n');

%% Check prerequisites
fprintf('═══ Prerequisites Check ═══\n');

main_data_file = '../Analyse steady states/data/AllVirtualPatientTypes_latest.csv';

if ~exist(main_data_file, 'file')
    % Try alternative path
    main_data_file = 'data/AllVirtualPatientTypes_latest.csv';
    if ~exist(main_data_file, 'file')
        error(['Missing main data file!\n' ...
               'Please run run_SteadyStates.m first to generate:\n' ...
               '  AllVirtualPatientTypes_latest.csv']);
    end
end

fprintf('✓ Main data file found: %s\n', main_data_file);

% Check file size
file_info = dir(main_data_file);
file_size_mb = file_info.bytes / (1024^2);
fprintf('  File size: %.1f MB\n', file_size_mb);

% Quick check of data dimensions
fprintf('  Checking data dimensions...\n');
try
    % Read just the first row to check columns
    opts = detectImportOptions(main_data_file, 'NumHeaderLines', 0);
    n_cols = numel(opts.VariableNames);
    fprintf('  ✓ Expected 26 columns, found %d columns\n', n_cols);
    
    if n_cols ~= 26
        warning('Expected 26 columns but found %d. Results may be unexpected.', n_cols);
    end
catch
    fprintf('  (Could not verify column count)\n');
end

fprintf('\n');

%% Configuration
fprintf('═══ Analysis Configuration ═══\n');
fprintf('This will generate figures for patients with:\n');
fprintf('  • 1 steady state  → PatientTypes_1_SteadyState.png\n');
fprintf('  • 2 steady states → PatientTypes_2_SteadyStates.png\n');
fprintf('  • 3 steady states → PatientTypes_3_SteadyStates.png\n');
fprintf('\n');
fprintf('Each script will:\n');
fprintf('  1. Load/filter data by number of steady states\n');
fprintf('  2. Group by region combinations\n');
fprintf('  3. Create visualisation with subplots\n');
fprintf('  4. Save figure and filtered data\n');
fprintf('\n');

%% Step 1: Patients with 1 Steady State
fprintf('╔═══════════════════════════════════════════════════════╗\n');
fprintf('║  STEP 1/3: Patients with 1 Steady State              ║\n');
fprintf('╚═══════════════════════════════════════════════════════╝\n\n');

tic;
run g_PatientTypes_1.m
elapsed_1 = toc;

fprintf('\n✓ Step 1 complete (%.1f seconds)\n\n', elapsed_1);

%% Step 2: Patients with 2 Steady States
fprintf('╔═══════════════════════════════════════════════════════╗\n');
fprintf('║  STEP 2/3: Patients with 2 Steady States             ║\n');
fprintf('╚═══════════════════════════════════════════════════════╝\n\n');

tic;
run g_PatientTypes_2.m
elapsed_2 = toc;

fprintf('\n✓ Step 2 complete (%.1f seconds)\n\n', elapsed_2);

%% Step 3: Patients with 3 Steady States
fprintf('╔═══════════════════════════════════════════════════════╗\n');
fprintf('║  STEP 3/3: Patients with 3 Steady States             ║\n');
fprintf('╚═══════════════════════════════════════════════════════╝\n\n');

tic;
run g_PatientTypes_3.m
elapsed_3 = toc;

fprintf('\n✓ Step 3 complete (%.1f seconds)\n\n', elapsed_3);

%% Summary
fprintf('╔═══════════════════════════════════════════════════════╗\n');
fprintf('║            ALL VISUALIZATIONS COMPLETE                ║\n');
fprintf('╚═══════════════════════════════════════════════════════╝\n\n');

total_elapsed = elapsed_1 + elapsed_2 + elapsed_3;

fprintf('═══ Execution Summary ═══\n');
fprintf('Total time: %.1f seconds (%.1f minutes)\n', total_elapsed, total_elapsed/60);
fprintf('  Step 1 (1 steady state):  %.1f seconds\n', elapsed_1);
fprintf('  Step 2 (2 steady states): %.1f seconds\n', elapsed_2);
fprintf('  Step 3 (3 steady states): %.1f seconds\n', elapsed_3);
fprintf('\n');

fprintf('═══ Output Files Generated ═══\n');
fprintf('\nFiltered Data Files (data/ folder):\n');
fprintf('  → data/One_StableState.csv\n');
fprintf('  → data/Two_StableStates.csv\n');
fprintf('  → data/Three_StableStates.csv\n');
fprintf('\n');

fprintf('Visualization Figures (figures/ folder):\n');
fprintf('  → figures/PatientTypes_1_SteadyState.png\n');
fprintf('     Shows 8 region categories for 1-state patients\n');
fprintf('\n');
fprintf('  → figures/PatientTypes_2_SteadyStates.png\n');
fprintf('     Shows region combinations for 2-state patients\n');
fprintf('\n');
fprintf('  → figures/PatientTypes_3_SteadyStates.png\n');
fprintf('     Shows all detected region combinations for 3-state patients\n');
fprintf('\n');

fprintf('╔═══════════════════════════════════════════════════════╗\n');
fprintf('║                        DONE!                          ║\n');
fprintf('╚═══════════════════════════════════════════════════════╝\n');